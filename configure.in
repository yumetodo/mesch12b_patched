dnl Meschach autoconf script
dnl Copyright (C) Brook Milligan and David Stewart, 1993, 2002
dnl $Id: configure.in,v 1.3 1994/03/08 05:41:32 des Exp $

dnl
dnl ----------------------------------------------------------------------
dnl Start of configure.in proper
dnl ----------------------------------------------------------------------
AC_INIT(err.c)
AC_CONFIG_HEADER(machine.h)
AC_LANG(C)
#LOCAL_PROG_ACC
#AC_PROGRAM_CHECK(CC, cc, cc, gcc)
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CC_STDC
#AC_AIX
#AC_MINIX
AC_ISC_POSIX

# AC_TRY_COMPILE([function prototypes in structures], ,
# [struct s1 {int (*f) (int a);};
# struct s2 {int (*f) (double a);};],
# AC_DEFINE(HAVE_PROTOTYPES_IN_STRUCT))])dnl

AC_DEFINE(HAVE_PROTOTYPES, [1], [Function prototypes supported])

AC_DEFINE(HAVE_PROTOTYPES_IN_STRUCT, [1], [Function prototypes allowed in structures])

AC_PROG_RANLIB
AC_CHECK_HEADERS([memory.h])
AC_HEADER_STDC
AC_CHECK_HEADERS([complex.h malloc.h])
#AC_CHECK_HEADER(complex.h, AC_DEFINE(HAVE_COMPLEX_H),)
#AC_CHECK_HEADER(malloc.h, AC_DEFINE(HAVE_MALLOC_H),)
AC_DEFINE([VARARGS], [], [varargs.h present])
AC_CHECK_HEADER(varargs.h, AC_DEFINE(VARARGS),)
AC_DEFINE([NOT_SEGMENTED], [1], [Not segemented???])
AC_SIZE_T
AC_CONST
AC_WORDS_BIGENDIAN

AC_ARG_WITH(complex, 
	    [AS_HELP_STRING([--with-complex],
			    [incorporate complex functions])],
	    [],
	    [with_complex=no])
AS_IF([test "x$with_complex" != xno],
      [AC_DEFINE([COMPLEX], [1], [incorporate complex functions]),
       AC_SUBST(WITH_COMPLEX,1)])

AC_ARG_WITH(sparse, 
	    [AS_HELP_STRING([--with-sparse],
			    [incorporate sparse functions])],
	    [],
	    [with_sparse=no])
AS_IF([test "x$with_sparse" != xno],
      [AC_DEFINE([SPARSE], [1], [incorporate sparse functions]),
       AC_SUBST(WITH_SPARSE,1)])

AC_ARG_WITH(all, 
	    [AS_HELP_STRING([--with-all],
			    [incorporate sparse and complex functions])],
	    [],
	    [with_all=no])
AS_IF([test "x$with_all" != xno],
      [AC_DEFINE([COMPLEX], [1], [incorporate complex functions])
       AC_DEFINE([SPARSE], [1], [incorporate sparse functions]),
       AC_SUBST(WITH_COMPLEX,1)
       AC_SUBST(WITH_SPARSE,1)])


AC_ARG_WITH(vunroll, 
	    [AS_HELP_STRING([--with-vunroll],
			    [unroll low level loops on vectors])],
	    [],
	    [with_vunroll=no])
AS_IF([test "x$with_vunroll" != xno],
      [AC_DEFINE([VUNROLL], [1], [unroll low level loops on vectors])])

AC_ARG_WITH(munroll, 
	    [AS_HELP_STRING([--with-munroll],
			    [unroll low level loops on matrices])],
	    [],
	    [with_munroll=no])
AS_IF([test "x$with_munroll" != xno],
      [AC_DEFINE([MUNROLL], [1], [unroll low level loops on matrices])])

AC_ARG_WITH(float, 
	    [AS_HELP_STRING([--with-float],
			    [single precision])],
	    [],
	    [with_float=no])
AS_IF([test "x$with_float" != xno],
      [AC_DEFINE([REAL_FLT], [1], [single precision])])

AC_ARG_WITH(double, 
	    [AS_HELP_STRING([--with-double],
			    [double precision])],
	    [],
	    [with_double=no])
AS_IF([test "x$with_double" != xno],
      [AC_DEFINE([REAL_DBL], [1], [double precision])])

#LIBS="$LIBS -lm"
AC_CHECK_LIB([m], [sin])

# FIXME: will always define this!
AC_DEFINE([U_INT_DEF], [], [u_int type defined])
AC_COMPILE_IFELSE(
    [AC_LANG_PROGRAM(
     [#include <stdio.h>
      #ifdef __STDC__
      #include <stdlib.h>
      #endif],
     [u_int i; i = 1;])],
     AC_DEFINE(U_INT_DEF, [1]))

#AC_TRY_COMPILE([u_int],[#include <stdio.h>
##ifdef __STDC__
##include <stdlib.h>
##endif],[u_int i; i = 1;],AC_DEFINE(U_INT_DEF))

found_dbl_epsilon=no
AC_MSG_CHECKING([DBL_EPSILON])
AC_COMPILE_IFELSE(
    [AC_LANG_PROGRAM(
     [#include <float.h>], 
     [float f = DBL_EPSILON;])],
    AC_MSG_RESULT([found])
    found_dbl_epsilon=yes,
    AC_MSG_RESULT([not found]))

AS_IF([test "x$found_dbl_epsilon" = xyes],
      [AC_DEFINE([F_MACHEPS],[DBL_EPSILON])],
      [AC_MSG_NOTICE([computing machine epsilon for double])
	echo $CC -o macheps dmacheps.c
	$CC -o macheps dmacheps.c
	AC_DEFINE_UNQUOTED([F_MACHEPS], [`./macheps`])])

found_flt_epsilon=no
AC_MSG_CHECKING([FLT_EPSILON])
AC_COMPILE_IFELSE(
    [AC_LANG_PROGRAM(
     [#include <float.h>], 
     [float f = FLT_EPSILON;])],
    AC_MSG_RESULT([found])
    found_flt_epsilon=yes,
    AC_MSG_RESULT([not found]))

AS_IF([test "x$found_flt_epsilon" = xyes],
      [AC_DEFINE([F_MACHEPS],[FLT_EPSILON])],
      [AC_MSG_NOTICE([computing machine epsilon for float])
	echo $CC -o macheps fmacheps.c
	$CC -o macheps fmacheps.c
	AC_DEFINE_UNQUOTED([F_MACHEPS], [`./macheps`])])



# echo checking char '\\0' vs. float zeros
# AC_PROGRAM_EGREP(yes,[main() {
#     char	*cp = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
#     double	*dp;
#     dp = (double *)cp;
#     if ( *dp == 0.0 ) printf("yes\n");  }
# ],AC_DEFINE(CHAR0ISDBL0))

AC_DEFINE([CHAR0ISDBL0], [], [char '\0' is same as float zeros])

AC_MSG_CHECKING([char '\0' vs. float zeros])
AC_RUN_IFELSE(
    [AC_LANG_PROGRAM(
     [], 
     [char	*cp = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
      double	*dp;
      dp = (double *)cp;
      if ( *dp == 0.0 ) return 0; else return 1;])],
    AC_MSG_RESULT([same])
    AC_DEFINE(CHAR0ISDBL0),
    AC_MSG_RESULT([different]),
    AC_MSG_RESULT([different (cross compiling)]))

AC_CHECK_FUNCS([bcopy bzero])
#LOCAL_HAVE_PROTOTYPES
AC_CONFIG_FILES([makefile])
AC_OUTPUT
# echo "Extensions to basic version: use configure --with-opt1 --with-opt2"
# echo "  Option:"
# echo "    --with-complex     incorporate complex functions"
# echo "    --with-sparse      incorporate sparse matrix functions"
# echo "    --with-all         both of the above"
# echo "    --with-unroll      unroll low level loops on vectors"
# echo "    --with-munroll     unroll low level loops on matrices"
# echo "    --with-float       single precision"
# echo "    --with-double      double precision (default)"
# echo "Re-run configure with these options if you want them"
# configure.in copyright (C) Brook Milligan and David Stewart, 1993, 2002
